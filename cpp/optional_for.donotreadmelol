//  this was from the "a raytracer in a weekend " hello world code for ppm files //

//float r = float(i) / float(w);
//float g = float(j) / float(h);
//float b = 0.4;
//int ir = int(r*255.99);
//int ig = int(g*255.99);
//int ib = int(b*255.99);

// test code

/*
int ir = int(RGB_test.r*255.99);
int ig = int(RGB_test.g*255.99);
int ib = int(RGB_test.b*255.99);
out << ir << " " << ig << " " << ib << "\n";
*/

// original intersect function part of the sphere struct
bool intersect(Ray ray, float &t){      // tis is goddamn fucking with my spirit ;_;
    Vec3 o=ray.o;
    Vec3 d=ray.d;
    Vec3 oc=o-c;        // vector with direction from sphere to camera
    float b = 2*dot(oc,d);      //
    float c = dot(oc,oc) - r*r;
    float disc = (b*b-4*1*c)/2;     // formula resolvente lol
    if(disc<0) return false;        // se o delta dentro da raiz for negativo quer dizer que nao ha zeros, como em matematica assim nao ha intersecoes com a esfera
    else{
        disc = sqrt(disc);      // se o delta for maior que zero calcula-se os valores ou o valor se for 0
        float zero0 = -b-disc;      // continuase a formula resolvente
        float zero1 = -b+disc;      // continuase a formula resolvente
        if (zero0<zero1) t=zero0;       // retornase o valor mais baixo para o valor zero
        else{
            t=zero1;
        };
    return true;
    };
};
